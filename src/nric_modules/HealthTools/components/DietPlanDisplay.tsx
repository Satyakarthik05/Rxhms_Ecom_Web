import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './DietPlanDisplay.css';

interface FoodItem {
  name: string;
  portion: string;
  calories: string;
  protein: string;
  carbs: string;
  fat: string;
  benefits: string[];
}

interface DietPlan {
  profile: {
    name: string;
    age: number;
    height: number;
    weight: number;
    targetWeight?: number;
    gender: string;
    activityLevel: string;
    goal: string;
    mealsPerDay: number;
    waterIntake: number;
    medicalConditions: string[];
    allergies: string[];
    dietaryRestrictions: string[];
    vitaminDeficiencies: string[];
  };
  nutritionalNeeds: {
    calories: string;
    protein: string;
    carbs: string;
    fat: string;
    fiber: string;
    water: string;
  };
  weeklyMealPlan: {
    [day: string]: {
      [mealType: string]: FoodItem[];
    };
  };
  recommendedFoods: Array<{
    name: string;
    portion: string;
    vitamins: string[];
    minerals: string[];
    benefits: string[];
  }>;
  supplementsNeeded: string[];
  tips: string[];
  warnings: string[];
}

const DietPlanDisplay: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { dietPlan } = location.state as { dietPlan: DietPlan };
  
  const [selectedDay, setSelectedDay] = useState('Monday');
  const [expandedSections, setExpandedSections] = useState({
    overview: true,
    mealPlan: true,
    recommendations: false,
    supplements: false,
    tips: false,
  });

  type SectionKey =
    | 'overview'
    | 'mealPlan'
    | 'recommendations'
    | 'supplements'
    | 'tips';

  const toggleSection = (section: SectionKey) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const weekDays = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday',
  ];

  const calculateBMI = () => {
    const heightInM = dietPlan.profile.height / 100;
    return (dietPlan.profile.weight / (heightInM * heightInM)).toFixed(1);
  };

  const getBMICategory = (bmi: number) => {
    if (bmi < 18.5) return { category: 'Underweight', color: '#3B82F6' };
    if (bmi < 25) return { category: 'Normal', color: '#10B981' };
    if (bmi < 30) return { category: 'Overweight', color: '#F59E0B' };
    return { category: 'Obese', color: '#EF4444' };
  };

  const bmi = parseFloat(calculateBMI());
  const bmiInfo = getBMICategory(bmi);

  return (
    <div className="container">
      {/* Header */}
      <div className="header">
        <div className="header-content">
          <h1 className="header-title">Your Personalized Diet Plan</h1>
          <p className="header-subtitle">
            Generated by AI based on your health profile and goals
          </p>
        </div>
        <button
          onClick={() => navigate(-1)}
          className="back-button"
        >
          ‚Üê Back to Form
        </button>
      </div>

      {/* Profile Overview */}
      <div className="card">
        <button
          onClick={() => toggleSection('overview')}
          className="card-header"
        >
          <div className="card-header-content">
            <span className="icon">üë§</span>
            <h2 className="card-title">Profile Overview</h2>
          </div>
          <span className="toggle-icon">
            {expandedSections.overview ? '‚ñº' : '‚ñ∂'}
          </span>
        </button>

        {expandedSections.overview && (
          <div className="card-body">
            <div className="grid">
              <div className="grid-item grid-item-blue">
                <div className="grid-item-header">
                  <span className="icon">üë§</span>
                  <h3 className="grid-item-title">Basic Info</h3>
                </div>
                <div className="grid-item-content">
                  <p className="grid-item-text">{dietPlan.profile.name}</p>
                  <p className="grid-item-text">{dietPlan.profile.age} years old</p>
                  <p className="grid-item-text">{dietPlan.profile.gender}</p>
                  <p className="grid-item-text">
                    BMI: {calculateBMI()} ({bmiInfo.category})
                  </p>
                </div>
              </div>

              <div className="grid-item grid-item-green">
                <div className="grid-item-header">
                  <span className="icon">üéØ</span>
                  <h3 className="grid-item-title">Goals</h3>
                </div>
                <div className="grid-item-content">
                  <p className="grid-item-text">
                    {dietPlan.profile.goal?.replace('_', ' ')}
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.height} cm
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.weight} kg
                  </p>
                  {dietPlan.profile.targetWeight && (
                    <p className="grid-item-text">
                      Target: {dietPlan.profile.targetWeight} kg
                    </p>
                  )}
                </div>
              </div>

              <div className="grid-item grid-item-purple">
                <div className="grid-item-header">
                  <span className="icon">üèÉ</span>
                  <h3 className="grid-item-title">Activity</h3>
                </div>
                <div className="grid-item-content">
                  <p className="grid-item-text">
                    {dietPlan.profile.activityLevel?.replace('_', ' ')}
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.mealsPerDay} meals/day
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.waterIntake} glasses water
                  </p>
                </div>
              </div>

              <div className="grid-item grid-item-red">
                <div className="grid-item-header">
                  <span className="icon">‚ù§Ô∏è</span>
                  <h3 className="grid-item-title">Health</h3>
                </div>
                <div className="grid-item-content">
                  <p className="grid-item-text">
                    {dietPlan.profile.medicalConditions?.length || 0} conditions
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.allergies?.length || 0} allergies
                  </p>
                  <p className="grid-item-text">
                    {dietPlan.profile.vitaminDeficiencies?.length || 0} deficiencies
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Nutritional Needs */}
      <div className="nutrition-card">
        <div className="nutrition-header">
          <span className="icon">üéØ</span>
          <h2 className="nutrition-title">Daily Nutritional Targets</h2>
        </div>

        <div className="nutrition-grid">
          <div className="nutrition-item nutrition-item-red">
            <p className="nutrition-value">
              {dietPlan.nutritionalNeeds.calories}
            </p>
            <p className="nutrition-label">Calories</p>
          </div>
          <div className="nutrition-item nutrition-item-blue">
            <p className="nutrition-value">
              {dietPlan.nutritionalNeeds.protein}g
            </p>
            <p className="nutrition-label">Protein</p>
          </div>
          <div className="nutrition-item nutrition-item-green">
            <p className="nutrition-value">
              {dietPlan.nutritionalNeeds.carbs}g
            </p>
            <p className="nutrition-label">Carbs</p>
          </div>
          <div className="nutrition-item nutrition-item-yellow">
            <p className="nutrition-value">
              {dietPlan.nutritionalNeeds.fat}g
            </p>
            <p className="nutrition-label">Fats</p>
          </div>
        </div>

        <div className="nutrition-grid-secondary">
          <div className="nutrition-item-secondary nutrition-item-purple">
            <p className="nutrition-value-secondary">
              {dietPlan.nutritionalNeeds.fiber}g
            </p>
            <p className="nutrition-label-secondary">Fiber</p>
          </div>
          <div className="nutrition-item-secondary nutrition-item-cyan">
            <div className="water-item">
              <span className="icon">üíß</span>
              <p className="nutrition-value-secondary">
                {dietPlan.nutritionalNeeds.water}L
              </p>
            </div>
            <p className="nutrition-label-secondary">Water</p>
          </div>
        </div>
      </div>

      {/* Weekly Meal Plan */}
      <div className="card">
        <button
          onClick={() => toggleSection('mealPlan')}
          className="card-header"
        >
          <div className="card-header-content">
            <span className="icon">üìÖ</span>
            <h2 className="card-title">Weekly Meal Plan</h2>
          </div>
          <span className="toggle-icon">
            {expandedSections.mealPlan ? '‚ñº' : '‚ñ∂'}
          </span>
        </button>

        {expandedSections.mealPlan && (
          <div className="card-body">
            {/* Day Selector */}
            <div className="day-selector">
              <div className="day-scroll">
                {weekDays.map(day => (
                  <button
                    key={day}
                    onClick={() => setSelectedDay(day)}
                    className={`day-button ${selectedDay === day ? 'day-button-active' : ''}`}
                  >
                    {day}
                  </button>
                ))}
              </div>
            </div>

            {/* Meal Details */}
            <div className="meal-container">
              {Object.entries(dietPlan.weeklyMealPlan[selectedDay]).map(
                ([mealType, foods]) => (
                  <div key={mealType} className="meal-card">
                    <div className="meal-header">
                      <span className="icon">üçΩÔ∏è</span>
                      <h3 className="meal-title">{mealType}</h3>
                    </div>
                    <div className="food-grid">
                      {foods.map((food: FoodItem, index: number) => (
                        <div key={index} className="food-item">
                          <h4 className="food-name">{food.name}</h4>
                          <p className="food-portion">{food.portion}</p>
                          <div className="nutrition-grid-small">
                            <div className="nutrition-item-small">
                              <p className="nutrition-label-small">Calories</p>
                              <p className="nutrition-value-small">{food.calories}</p>
                            </div>
                            <div className="nutrition-item-small">
                              <p className="nutrition-label-small">Protein</p>
                              <p className="nutrition-value-small">{food.protein}g</p>
                            </div>
                            <div className="nutrition-item-small">
                              <p className="nutrition-label-small">Carbs</p>
                              <p className="nutrition-value-small">{food.carbs}g</p>
                            </div>
                            <div className="nutrition-item-small">
                              <p className="nutrition-label-small">Fat</p>
                              <p className="nutrition-value-small">{food.fat}g</p>
                            </div>
                          </div>
                          {food.benefits.length > 0 && (
                            <div className="benefits-container">
                              <p className="benefits-label">Benefits: </p>
                              <p className="benefits-text">
                                {food.benefits.join(', ')}
                              </p>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                ),
              )}
            </div>
          </div>
        )}
      </div>

      {/* Food Recommendations for Deficiencies */}
      {dietPlan.recommendedFoods.length > 0 && (
        <div className="card">
          <button
            onClick={() => toggleSection('recommendations')}
            className="card-header"
          >
            <div className="card-header-content">
              <span className="icon">‚ù§Ô∏è</span>
              <h2 className="card-title">Foods for Your Deficiencies</h2>
            </div>
            <span className="toggle-icon">
              {expandedSections.recommendations ? '‚ñº' : '‚ñ∂'}
            </span>
          </button>

          {expandedSections.recommendations && (
            <div className="card-body">
              <div className="recommended-foods-grid">
                {dietPlan.recommendedFoods.map((food, index) => (
                  <div key={index} className="recommended-food-item">
                    <h4 className="recommended-food-name">{food.name}</h4>
                    <div className="recommended-food-content">
                      <p className="recommended-food-text">
                        Rich in: {food.vitamins.concat(food.minerals).join(', ')}
                      </p>
                      <p className="recommended-food-text">
                        Benefits: {food.benefits.join(', ')}
                      </p>
                    </div>
                    <div className="recommended-food-portion">
                      <p className="recommended-food-portion-text">
                        {food.portion}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Supplements */}
      {dietPlan.supplementsNeeded.length > 0 && (
        <div className="card">
          <button
            onClick={() => toggleSection('supplements')}
            className="card-header"
          >
            <div className="card-header-content">
              <span className="icon">üíä</span>
              <h2 className="card-title">Recommended Supplements</h2>
            </div>
            <span className="toggle-icon">
              {expandedSections.supplements ? '‚ñº' : '‚ñ∂'}
            </span>
          </button>

          {expandedSections.supplements && (
            <div className="card-body">
              <div className="warning-box">
                <span className="icon">‚ö†Ô∏è</span>
                <p className="warning-text">
                  Important: Consult with a healthcare provider before starting
                  any supplements.
                </p>
              </div>
              <div className="supplements-list">
                {dietPlan.supplementsNeeded.map((supplement, index) => (
                  <div key={index} className="supplement-item">
                    <span className="icon">üíä</span>
                    <p className="supplement-text">{supplement}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Tips and Warnings */}
      <div className="tips-warnings-container">
        {/* Tips */}
        <div className="card">
          <button
            onClick={() => toggleSection('tips')}
            className="card-header"
          >
            <div className="card-header-content">
              <span className="icon">üí°</span>
              <h2 className="card-title">Helpful Tips</h2>
            </div>
            <span className="toggle-icon">
              {expandedSections.tips ? '‚ñº' : '‚ñ∂'}
            </span>
          </button>

          {expandedSections.tips && (
            <div className="card-body">
              <div className="tips-list">
                {dietPlan.tips.map((tip, index) => (
                  <div key={index} className="tip-item">
                    <span className="icon">üí°</span>
                    <p className="tip-text">{tip}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Warnings */}
        <div className="card">
          <div className="card-header">
            <div className="card-header-content">
              <span className="icon">‚ö†Ô∏è</span>
              <h2 className="card-title">Important Warnings</h2>
            </div>
          </div>
          <div className="card-body">
            <div className="warnings-list">
              {dietPlan.warnings.map((warning, index) => (
                <div key={index} className="warning-item">
                  <span className="icon">‚ö†Ô∏è</span>
                  <p className="warning-item-text">{warning}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DietPlanDisplay;